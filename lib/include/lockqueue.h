#pragma once
#include <queue>
#include <thread>
#include <mutex>//pthread_mutex_t互斥锁
#include <condition_variable>//pthread_condition_t条件变量

//异步写日志的日志队列
template<typename T>
class LockQueue
{
public:
    //出队入队需要实现线程安全 入队出队是用的同一把锁
    //多个worker线程都会写日志queue
    void Push(const T &data)
    {
        std::lock_guard<std::mutex> lock(m_mutex);//互斥锁 出括号自动析构释放
        m_queue.push(data);
        m_condvariable.notify_one();//条件变量notify one是因为只有一个线程在里面取东西写日志 只用通知一个
    }

    //一个线程读日志queue，写日志文件
    T Pop()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        while (m_queue.empty())
        {
            //日志队列为空，线程进入wait状态 并将持有的锁释放 线程在条件变量 m_condvariable 上等待，直到队列 m_queue 不再为空
            m_condvariable.wait(lock);
        }
        T data=m_queue.front();
        m_queue.pop();
        return data;
    }
private:
    std::queue<T> m_queue;
    std::mutex m_mutex;
    std::condition_variable m_condvariable;



};